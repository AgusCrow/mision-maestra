generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  username        String            @unique
  email           String?           @unique
  passwordHash    String
  displayName     String?
  avatar          String?
  level           Int               @default(1)
  experience      Int               @default(0)
  points          Int               @default(0)
  coins           Int               @default(100)
  isOnline        Boolean           @default(false)
  lastSeen        DateTime?
  currentActivity String?
  mood            String?
  socialBattery   Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  inventory       InventoryItem[]
  sentInvitations Invitation[]      @relation("Inviter")
  invitations     Invitation[]
  logs            ServerLog[]
  taskCompletions TaskCompletion[]
  assignedTasks   Task[]            @relation("AssignedTasks")
  createdTasks    Task[]            @relation("CreatedTasks")
  teamMemberships TeamMember[]
  createdTeams    Team[]            @relation("TeamCreator")
  achievements    UserAchievement[]
  quests          UserQuest[]

  @@map("users")
}

model Team {
  id           String            @id @default(cuid())
  name         String
  description  String?
  avatar       String?
  isActive     Boolean           @default(true)
  score        Int               @default(0)
  level        Int               @default(1)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  creatorId    String
  invitations  Invitation[]
  tasks        Task[]
  achievements TeamAchievement[]
  members      TeamMember[]
  creator      User              @relation("TeamCreator", fields: [creatorId], references: [id])

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  joinedAt DateTime @default(now())
  role     TeamRole @default(MEMBER)
  isActive Boolean  @default(true)
  score    Int      @default(0)
  userId   String
  teamId   String
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model Task {
  id          String           @id @default(cuid())
  title       String
  description String?
  status      TaskStatus       @default(PENDING)
  priority    TaskPriority     @default(MEDIUM)
  difficulty  Int              @default(1)
  dueDate     DateTime?
  points      Int              @default(10)
  coins       Int              @default(5)
  experience  Int              @default(25)
  questId     String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  completedAt DateTime?
  creatorId   String
  assigneeId  String?
  teamId      String
  completions TaskCompletion[]
  quest       Quest?           @relation(fields: [questId], references: [id])
  team        Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  assignee    User?            @relation("AssignedTasks", fields: [assigneeId], references: [id])
  creator     User             @relation("CreatedTasks", fields: [creatorId], references: [id])

  @@map("tasks")
}

model TaskCompletion {
  id          String   @id @default(cuid())
  completedAt DateTime @default(now())
  notes       String?
  rating      Int?     @default(5)
  taskId      String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_completions")
}

model Invitation {
  id        String           @id @default(cuid())
  status    InvitationStatus @default(PENDING)
  message   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  teamId    String
  inviteeId String
  inviterId String
  inviter   User             @relation("Inviter", fields: [inviterId], references: [id], onDelete: Cascade)
  invitee   User             @relation(fields: [inviteeId], references: [id], onDelete: Cascade)
  team      Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("invitations")
}

model Quest {
  id          String        @id @default(cuid())
  title       String
  description String
  type        QuestType     @default(DAILY)
  difficulty  Int           @default(1)
  points      Int           @default(50)
  coins       Int           @default(25)
  experience  Int           @default(100)
  isActive    Boolean       @default(true)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  rewards     QuestReward[]
  tasks       Task[]
  userQuests  UserQuest[]

  @@map("quests")
}

model UserQuest {
  id          String      @id @default(cuid())
  status      QuestStatus @default(AVAILABLE)
  progress    Int         @default(0)
  maxProgress Int         @default(1)
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime    @default(now())
  userId      String
  questId     String
  quest       Quest       @relation(fields: [questId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, questId])
  @@map("user_quests")
}

model QuestReward {
  id          String     @id @default(cuid())
  type        RewardType
  amount      Int
  description String?
  questId     String
  quest       Quest      @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@map("quest_rewards")
}

model Achievement {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String
  icon             String?
  category         String            @default("general")
  condition        String
  points           Int               @default(0)
  coins            Int               @default(0)
  experience       Int               @default(0)
  isHidden         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  teamAchievements TeamAchievement[]
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  unlockedAt    DateTime    @default(now())
  userId        String
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model TeamAchievement {
  id            String      @id @default(cuid())
  unlockedAt    DateTime    @default(now())
  teamId        String
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  team          Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, achievementId])
  @@map("team_achievements")
}

model InventoryItem {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        ItemType   @default(CONSUMABLE)
  rarity      ItemRarity @default(COMMON)
  value       Int        @default(0)
  quantity    Int        @default(1)
  isEquipped  Boolean    @default(false)
  properties  String?
  createdAt   DateTime   @default(now())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("inventory_items")
}

model ServerLog {
  id        String   @id @default(cuid())
  level     LogLevel @default(INFO)
  message   String
  metadata  String?
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@map("server_logs")
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
}

enum QuestType {
  DAILY
  WEEKLY
  MAIN
  SIDE
  CHALLENGE
}

enum QuestStatus {
  AVAILABLE
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum RewardType {
  POINTS
  COINS
  EXPERIENCE
  ITEM
}

enum ItemType {
  WEAPON
  ARMOR
  CONSUMABLE
  DECORATION
  SPECIAL
}

enum ItemRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
}
