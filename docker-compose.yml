version: '3.8'

services:
  # C# Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "5000:5000"
      - "5001:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5000
    volumes:
      - backend_data:/app/data
    networks:
      - mision-maestra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:5000/api
      - NEXT_PUBLIC_SIGNALR_URL=http://backend:5000/hub/mision-maestra
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - mision-maestra-network
    restart: unless-stopped

  # Database (SQLite is file-based, but we can use a volume for persistence)
  # Note: SQLite doesn't need a separate container, but we'll use a volume for data persistence
  database:
    image: alpine:latest
    volumes:
      - backend_data:/data
    command: tail -f /dev/null  # Keep container running
    networks:
      - mision-maestra-network

volumes:
  backend_data:
    driver: local

networks:
  mision-maestra-network:
    driver: bridge